Hola estoy aprendiendo a usar git

tengo 28 años soy de armenia y me llamo Camilo Alonso Hernandez Cediel

he conozco 3 paises

soy adminsitrador de empresas y estudio ingenieria de software.

de momento hemos visto como funciona, y tendremos los sigueintes comandos:
git add = sube ala ram el archivo o sus cambios, 
        ahora nos enseñan que se puede hacer el git add con el commit haciendo lo siguiente git commit -am "comentario de branch" el unico requisito es haber hecho un add al archivo que esta por subir al repositorio y a el remoto.
git commit ingresa esos cambios al repositorio, haciendo lo que llamamos una rama o branch, este debe ir siempre comentado o comentando las modificiaciones
osea queda mas o menos asi git commit vacio.txt -m "agrega el comentario" y asi se va al repositorio
git status: muestra que esta pasando o que se ha hecho en ese repositorio, si existen modificaciones y si este no se a ingresado.
git config que se usa para modificar datos y otras cosas del git, si se hace git config -- list, nos muestra todo el core del repositorio autor y demas.
git config solo0 muestra todo l0o que se puede hacer con el git.
git log; nos muestra toda la evolucion del archivo que estamos creando o modificando.
git rm --cahced "el archivo": este nos sirve cuando queremos soltar un git add, para no subirlo al commit.

      git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro 
de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git add . : sube todos los cambios en todo el repositorio

git show "y el archivo" : nos muestra las diferencias entre nuestra version anterior y la vercion presente, ademas 
esto se llama hacer diff, nos muestra los bytes cambiados, y todo lo que se agrega respecto con la version anterior-
git diff "numero del head" "numero de la version a comparar"
nos muestra todo

tenemos un nuevo coamndo el checkout , ese se trae los cambios de la version que uno quiera, a la carpeta local, puede ser cualquier cambio o todos los cambiados

    git checkout se usa asi:
         git checkout "el id de el commit" y el archivo del cual queremos volver.

ahora tenemos al git reset, el cual usa el numero del commit, para regresar a esa version
existen dos tipos el de tipo suave y duro, en ejecucion seria hard y soft, hard nos devuelve absolutamnte todo a la verson anterior
soft nos deja los cambios en el staying, para volver a hacer commit. 

    git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, 
    solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.


tenemos un nuevo y hermoso comando:
    git log --stat

    nos muestra la diferencia exacta del diff entre versiones. txt


    ahora aprendimos a hacer branchs o ramas y se hace cuando mi head esta listo 

            se enuncua como git branch " nombre de la rama"

            
            nose que paso, esta es una prueba de mirar si el auto complete funciona en terminal
            vamos a ver que pasa jajaja




